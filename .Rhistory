#colSums(is.na(learn))
revlNA=sum(is.na(learn$revenue),1)-1
txrevlNA=round((revlNA/nrow(learn)*100))
matrixplot(learn)
setwd("C:/Users/Marlène/Desktop/MachineLearning/Projet-ML")
library(caret)
library(tidyverse)
library(gridExtra)
library(knitr)
library(plotly)
library(mice)
library("RColorBrewer")
library(VIM)
library("GGally")
library("ggmap")
library(maps)
library(tmap)
library(mapdata)
library(mapproj)
library(sf)
library(raster)
library(spData)
library(MASS)
library(ROCR)
library(rpart)
library(rpart.plot)
library(InformationValue)
library(randomForest)
learn = read.csv("projet-app-13-learn.csv",header = TRUE,encoding = "UTF-8")
test = read.csv("projet-app-13-test.csv",header = TRUE,encoding = "UTF-8")
#summary(learn)
#summary(test)
View(learn)
#View(test)
cities_gps = read.csv("cities-gps.csv",header = TRUE,encoding = "UTF-8")
cities_population = read.csv("cities-population.csv",header = TRUE,encoding = "UTF-8")
dept = read.csv("departments.csv",header = TRUE,encoding = "UTF-8")
regions = read.csv("regions.csv",header = TRUE,encoding = "UTF-8")
View(cities_gps)
View(cities_population)
View(dept)
View(regions)
# renommage de variable
learn=learn %>% rename(categorie = catégorie)
test=test %>% rename(categorie = catégorie)
#conversion variables en factor
learn$reg = as.factor(learn$reg)
learn$categorie = as.factor(learn$categorie)
test$reg = as.factor(test$reg)
test$categorie = as.factor(test$categorie)
# retraitement variable cible
learn$cible= as.character(learn$cible)
learn$cible[learn$cible == "failure"]=FALSE
learn$cible[learn$cible == "success"]=TRUE
learn$cible=as.logical(learn$cible)
learn$ciblenum[learn$cible == "FALSE"]=-1
learn$ciblenum[learn$cible == "TRUE"]=1
learn$ciblenum=as.numeric(learn$ciblenum)
learn=merge(x=learn,y=cities_gps,by.x = "insee.code",by.y="id")
learn=merge(x=learn,y=cities_population,by.x = "insee.code",by.y="id")
learn=merge(x=learn,y=regions,by.x = "reg",by.y="id")
department_ciblenum <- learn  %>% group_by(department) %>%
summarize(ciblenum=mean(ciblenum))%>% inner_join(dept,by=c("department"="id"))
cartefrance =as_tibble(map_data("france"))
cartefrance <- cartefrance %>% mutate(region=str_to_upper(region))
broken_names <- list("VAL-DOISE"="VAL-D'OISE", "COTES-DARMOR"="COTES-D'ARMOR", "COTE-DOR"="COTE-D'OR",
"CORSE DU SUD"="CORSE-DU-SUD")
for(bn in names(broken_names)) {
cartefrance <- cartefrance %>% mutate(region=ifelse(region==bn,broken_names[[bn]],region))
}
department_ciblenum$REGION=as.character(department_ciblenum$name)
cartefrance=cartefrance %>% left_join(department_ciblenum,by=c("region"="REGION"))
france_cible_ggplot= ggplot(cartefrance,aes(x=long,y=lat)) +
geom_polygon(aes(group=group,fill=ciblenum),color=grey(0.75)) +
scale_fill_continuous(type="viridis") +
coord_map() +
ggtitle("titre")
france_cible_ggplot
# Librairies
library(caret)
library(tidyverse)
library(gridExtra)
library(knitr)
library(plotly)
library(mice)
library("RColorBrewer")
library(VIM)
library("GGally")
library("ggmap")
library(maps)
library(tmap)
library(mapdata)
library(mapproj)
library(sf)
library(raster)
library(spData)
library(MASS)
library(ROCR)
library(rpart)
library(rpart.plot)
library(InformationValue)
library(randomForest)
learn = read.csv("projet-app-13-learn.csv",header = TRUE,encoding = "UTF-8")
test = read.csv("projet-app-13-test.csv",header = TRUE,encoding = "UTF-8")
#summary(learn)
#summary(test)
View(learn)
#View(test)
cities_gps = read.csv("cities-gps.csv",header = TRUE,encoding = "UTF-8")
cities_population = read.csv("cities-population.csv",header = TRUE,encoding = "UTF-8")
dept = read.csv("departments.csv",header = TRUE,encoding = "UTF-8")
regions = read.csv("regions.csv",header = TRUE,encoding = "UTF-8")
View(cities_gps)
View(cities_population)
View(dept)
View(regions)
# renommage de variable
learn=learn %>% rename(categorie = catégorie)
test=test %>% rename(categorie = catégorie)
#conversion variables en factor
learn$reg = as.factor(learn$reg)
learn$categorie = as.factor(learn$categorie)
test$reg = as.factor(test$reg)
test$categorie = as.factor(test$categorie)
# retraitement variable cible
learn$cible= as.character(learn$cible)
learn$cible[learn$cible == "failure"]=FALSE
learn$cible[learn$cible == "success"]=TRUE
learn$cible=as.logical(learn$cible)
learn$ciblenum[learn$cible == "FALSE"]=-1
learn$ciblenum[learn$cible == "TRUE"]=1
learn$ciblenum=as.numeric(learn$ciblenum)
learn=merge(x=learn,y=cities_gps,by.x = "insee.code",by.y="id")
learn=merge(x=learn,y=cities_population,by.x = "insee.code",by.y="id")
learn=merge(x=learn,y=regions,by.x = "reg",by.y="id")
department_ciblenum <- learn  %>% group_by(department) %>%
summarize(ciblenum=mean(ciblenum))%>% inner_join(dept,by=c("department"="id"))
cartefrance =as_tibble(map_data("france"))
cartefrance <- cartefrance %>% mutate(region=str_to_upper(region))
broken_names <- list("VAL-DOISE"="VAL-D'OISE", "COTES-DARMOR"="COTES-D'ARMOR", "COTE-DOR"="COTE-D'OR",
"CORSE DU SUD"="CORSE-DU-SUD")
for(bn in names(broken_names)) {
cartefrance <- cartefrance %>% mutate(region=ifelse(region==bn,broken_names[[bn]],region))
}
#department_ciblenum$REGION=as.character(department_ciblenum$name)
cartefrance=cartefrance %>% left_join(department_ciblenum,by=c("region"="REGION"))
france_cible_ggplot= ggplot(cartefrance,aes(x=long,y=lat)) +
geom_polygon(aes(group=group,fill=ciblenum),color=grey(0.75)) +
scale_fill_continuous(type="viridis") +
coord_map() +
ggtitle("titre")
france_cible_ggplot
# Librairies
library(caret)
library(tidyverse)
library(gridExtra)
library(knitr)
library(plotly)
library(mice)
library("RColorBrewer")
library(VIM)
library("GGally")
library("ggmap")
library(maps)
library(tmap)
library(mapdata)
library(mapproj)
library(sf)
library(raster)
library(spData)
library(MASS)
library(ROCR)
library(rpart)
library(rpart.plot)
library(InformationValue)
library(randomForest)
learn = read.csv("projet-app-13-learn.csv",header = TRUE,encoding = "UTF-8")
test = read.csv("projet-app-13-test.csv",header = TRUE,encoding = "UTF-8")
#summary(learn)
#summary(test)
View(learn)
#View(test)
cities_gps = read.csv("cities-gps.csv",header = TRUE,encoding = "UTF-8")
cities_population = read.csv("cities-population.csv",header = TRUE,encoding = "UTF-8")
dept = read.csv("departments.csv",header = TRUE,encoding = "UTF-8")
regions = read.csv("regions.csv",header = TRUE,encoding = "UTF-8")
View(cities_gps)
View(cities_population)
View(dept)
View(regions)
# renommage de variable
learn=learn %>% rename(categorie = catégorie)
test=test %>% rename(categorie = catégorie)
#conversion variables en factor
learn$reg = as.factor(learn$reg)
learn$categorie = as.factor(learn$categorie)
test$reg = as.factor(test$reg)
test$categorie = as.factor(test$categorie)
# retraitement variable cible
learn$cible= as.character(learn$cible)
learn$cible[learn$cible == "failure"]=FALSE
learn$cible[learn$cible == "success"]=TRUE
learn$cible=as.logical(learn$cible)
learn$ciblenum[learn$cible == "FALSE"]=-1
learn$ciblenum[learn$cible == "TRUE"]=1
learn$ciblenum=as.numeric(learn$ciblenum)
learn=merge(x=learn,y=cities_gps,by.x = "insee.code",by.y="id")
learn=merge(x=learn,y=cities_population,by.x = "insee.code",by.y="id")
learn=merge(x=learn,y=regions,by.x = "reg",by.y="id")
department_ciblenum <- learn  %>% group_by(department) %>%
summarize(ciblenum=mean(ciblenum))%>% inner_join(dept,by=c("department"="id"))
cartefrance =as_tibble(map_data("france"))
cartefrance <- cartefrance %>% mutate(region=str_to_upper(region))
broken_names <- list("VAL-DOISE"="VAL-D'OISE", "COTES-DARMOR"="COTES-D'ARMOR", "COTE-DOR"="COTE-D'OR",
"CORSE DU SUD"="CORSE-DU-SUD")
for(bn in names(broken_names)) {
cartefrance <- cartefrance %>% mutate(region=ifelse(region==bn,broken_names[[bn]],region))
}
department_ciblenum$REGION=as.character(department_ciblenum$name)
cartefrance=cartefrance %>% left_join(department_ciblenum,by=c("region"="REGION"))
france_cible_ggplot= ggplot(cartefrance,aes(x=long,y=lat)) +
geom_polygon(aes(group=group,fill=ciblenum),color=grey(0.75)) +
scale_fill_continuous(type="viridis") +
coord_map() +
ggtitle("titre")
france_cible_ggplot
knitr::opts_chunk$set(echo = FALSE,message=FALSE, warning=FALSE)
# Packages untilisés
library(caret)
library(tidyverse)
library(gridExtra)
library(knitr)
library(plotly)
library(mice)
library("RColorBrewer")
library(VIM)
library("GGally")
library("ggmap")
library(maps)
library(tmap)
library(mapdata)
library(mapproj)
library(sf)
library(raster)
library(spData)
library(MASS)
library(ROCR)
library(rpart)
library(rpart.plot)
library(InformationValue)
library(randomForest)
# parametrage des graphiques
theme_set=(theme_bw()+theme(plot.title=element_text(hjust=0.5,size=14,face="bold"),plot.subtitle=element_text(hjust=0.5,size=12) ,axis.title=element_text(size=10)))
#chargement des jeux de données d'entrainement et test
learn = read.csv("projet-app-13-learn.csv",header = TRUE,encoding = "UTF-8")
test = read.csv("projet-app-13-test.csv",header = TRUE,encoding = "UTF-8")
# chargement des données géographiques
cities_gps = read.csv("cities-gps.csv",header = TRUE,encoding = "UTF-8")
cities_population = read.csv("cities-population.csv",header = TRUE,encoding = "UTF-8")
dept = read.csv("departments.csv",header = TRUE,encoding = "UTF-8")
regions = read.csv("regions.csv",header = TRUE,encoding = "UTF-8")
# renommage de variable
learn=learn %>% rename(categorie = catégorie)
test=test %>% rename(categorie = catégorie)
#conversion variables en factor
learn$reg = as.factor(learn$reg)
learn$categorie = as.factor(learn$categorie)
test$reg = as.factor(test$reg)
test$categorie = as.factor(test$categorie)
# retraitement variable cible
learn$cible= as.character(learn$cible)
learn$cible[learn$cible == "failure"]=FALSE
learn$cible[learn$cible == "success"]=TRUE
learn$cible=as.logical(learn$cible)
learn$ciblenum[learn$cible == "FALSE"]=-1
learn$ciblenum[learn$cible == "TRUE"]=1
learn$ciblenum=as.numeric(learn$ciblenum)
learn=merge(x=learn,y=cities_gps,by.x = "insee.code",by.y="id")
learn=merge(x=learn,y=cities_population,by.x = "insee.code",by.y="id")
learn=merge(x=learn,y=regions,by.x = "reg",by.y="id")
test=merge(x=test,y=cities_gps,by.x = "insee.code",by.y="id")
test=merge(x=test,y=cities_population,by.x = "insee.code",by.y="id")
test=merge(x=test,y=regions,by.x = "reg",by.y="id")
learn=learn %>% rename(REGION = name)
test=test %>% rename(REGION = name)
learn.row=dim(learn)[1]
#colSums(is.na(learn))
revlNA=sum(is.na(learn$revenue),1)-1
txrevlNA=round((revlNA/nrow(learn)*100))
matrixplot(learn)
#colSums(is.na(test))
revtNA=sum(is.na(test$revenue),1)-1
txrevtNA=round((revtNA/nrow(test)*100))
learn$rev.mv="Valeur"
learn$rev.mv[is.na(learn$revenue)]="NA"
ggplot(learn, aes(x = rev.mv, fill = cible)) +
labs(title = "Répartition du succès/échec de la cible",
x = "Valeur de la variable revenu", y = "Nombre observé",
fill = "Cible", subtitle = "en fonction de la disponibilité de la donnée revenu") +
scale_fill_manual(values=c("brown2","lightskyblue"),label=c("Echec","Succès")) +
geom_bar(col = "black")
#variable composée revenue / cible
learn$revmv.cible="NA"
learn$revmv.cible[learn$rev.mv=="NA" & learn$cible=="FALSE"]="revNA-échec"
learn$revmv.cible[learn$rev.mv=="NA" & learn$cible=="TRUE"]="revNA-succès"
learn$revmv.cible[learn$rev.mv=="Valeur" & learn$cible=="FALSE"]="revVAL-échec"
learn$revmv.cible[learn$rev.mv=="Valeur" & learn$cible=="TRUE"]="revVAL-succès"
# tranches d'age
learn$age.tra[learn$age>=0 & learn$age<=10]="0-10"
learn$age.tra[learn$age>10 & learn$age<=20]="11-20"
learn$age.tra[learn$age>20 & learn$age<=30]="21-30"
learn$age.tra[learn$age>30 & learn$age<=40]="31-40"
learn$age.tra[learn$age>40 & learn$age<=50]="41-50"
learn$age.tra[learn$age>50 & learn$age<=60]="51-60"
learn$age.tra[learn$age>60 & learn$age<=70]="61-70"
learn$age.tra[learn$age>70 & learn$age<=80]="71-80"
learn$age.tra[learn$age>80 & learn$age<=90]="81-90"
learn$age.tra[learn$age>90] ="90-100"
learn$csp[learn$categorie==1]=" 1-Agriculteurs"
learn$csp[learn$categorie==2]=" 2-Artisans, commerçants, chef d'entp"
learn$csp[learn$categorie==3]=" 3-Cadres"
learn$csp[learn$categorie==4]=" 4-Prof. intermédiaires"
learn$csp[learn$categorie==5]=" 5-Empl. qualifiés"
learn$csp[learn$categorie==6]=" 6-Empl. non qualifiés"
learn$csp[learn$categorie==7]=" 7-Ouvr. qualifiés"
learn$csp[learn$categorie==8]=" 8-Ouvr. non qualifiés"
learn$csp[learn$categorie==9]=" 9-Non déterminé"
learn$csp[learn$categorie==10]="10-Etudiants"
learn$csp[learn$categorie==11]="11-Chômeurs"
learn$csp[learn$categorie==12]="12-Inactifs"
learn$csp[learn$categorie==13]="13-Retraités"
p1=ggplot(learn, aes(x = revmv.cible, fill = age.tra)) +
labs(title = "Répartition du succès/échec et de la disponibilité de revenu ",
x = "Valeur de la variable revenu/cible campagne", y = "Nombre d'observations",
fill = "Age", subtitle = "en fonction de l'age") +
geom_bar(col = "black")
p2=ggplot(learn, aes(x = revmv.cible, fill = csp)) +
labs(
x = "Valeur de la variable revenu/cible campagne", y = "Nombre d'observations",
fill = "CSP", subtitle = "en fonction de la CSP") +
geom_bar(col = "black")
p3=ggplot(learn, aes(x = revmv.cible, fill = sex)) +
labs(
x = "Valeur de la variable revenu/cible campagne", y = "Nombre d'observations",
fill = "Sexe", subtitle = "en fonction du sexe") +
scale_fill_manual(values=c("brown2","lightskyblue"),label=c("Femme","Homme"))+
geom_bar(col = "black")
p4=ggplot(learn, aes(x = revmv.cible, fill = REGION)) +
labs(
x = "Valeur de la variable revenu/cible campagne", y = "Nombre d'observations",
fill = "Région", subtitle = "en fonction de la région") +
geom_bar(col = "black")
p5=ggplot(learn, aes(x = revmv.cible, fill = city.type)) +
labs(
x = "variable revenu/cible campagne", y = "Nombre observé",
fill = "type de ville", subtitle = "en fonction du type de ville") +
geom_bar(col = "black")
p1
p2
p3
p4
p5
#fichier d'apprentissage
l.cibleT=sum(learn$cible=="TRUE")
l.cibleF=sum(learn$cible=="FALSE")
l.txcibleT=round((l.cibleT/nrow(learn)*100))
l.txcibleF=round((l.cibleF/nrow(learn)*100))
# effectif femmes
l.nrowF=sum(learn$sex=="Female")
l.txF=round((l.nrowF/nrow(learn)*100))
# effectif hommes
l.nrowM=sum(learn$sex=="Male")
l.txM=round((l.nrowM/nrow(learn)*100))
# taux de succès femmes
l.nrowsucF=learn %>% group_by(sex)  %>% count(cible) %>%
filter(cible=="TRUE" & sex=="Female")
l.txsucF=round((l.nrowsucF[3]/l.nrowF)*100)
# taux de succès hommes
l.nrowsucM=learn %>% group_by(sex)  %>% count(cible) %>%
filter(cible=="TRUE" & sex=="Male")
l.txsucM=round((l.nrowsucM[3]/l.nrowM)*100)
l.txechM=100-l.txsucM
p6=ggplot(learn, aes(x = sex, fill= cible)) +
labs(title = "Répartition du succès/échec",
x = "Sexe", y = "Nombre d'observations",
subtitle = "en fonction du sexe") +
scale_x_discrete(labels=c("Femme","Homme")) +
scale_fill_manual(values=c("brown2","lightskyblue"),label=c("Echec","Succès"))+
geom_bar(col = "black")
p6
p7=ggplot(learn, aes(x = age, fill= cible)) +
labs(title = "Répartition du succès/échec",
x = "Age", y = "Nombre d'observations",
subtitle = "en fonction de l'age") +
scale_fill_manual(values=c("brown2","lightskyblue"),label=c("Echec","Succès")) +
geom_bar(col = "black")
p7
p8=ggplot(learn, aes(x = csp, fill= cible)) +
labs(title = "Répartition du succès/échec",
x = "CSP", y = "Nombre d'observations",
subtitle = "en fonction de la CSP") +
scale_fill_manual(values=c("brown2","lightskyblue"),label=c("Echec","Succès"))+
geom_bar(col = "black")+coord_flip()
p8
p8=ggplot(learn, aes(x = city.type, fill= cible)) +
labs(title = "Répartition du succès/échec",
x = "Type de ville", y = "Nombre d'observations",
subtitle = "en fonction du type de ville") +
scale_fill_manual(values=c("brown2","lightskyblue"),label=c("Echec","Succès"))+
geom_bar(col = "black")+coord_flip()
p8
p9=ggplot(learn, aes(x = REGION, fill= cible)) +
labs(title = "Répartition du succès/échec",
x = "Région", y = "Nombre d'observations",
subtitle = "en fonction des régions") +
scale_fill_manual(values=c("brown2","lightskyblue"),label=c("Echec","Succès"))+
geom_bar(col = "black")+coord_flip()
p9
department_ciblenum=learn  %>% group_by(department) %>%
summarize(ciblenum=mean(ciblenum))%>% inner_join(dept,by=c("department"="id"))
cartefrance=as_tibble(map_data("france"))
cartefrance=cartefrance %>% mutate(region=str_to_upper(region))
broken_names=list("VAL-DOISE"="VAL-D'OISE", "COTES-DARMOR"="COTES-D'ARMOR", "COTE-DOR"="COTE-D'OR",
"CORSE DU SUD"="CORSE-DU-SUD")
for(bn in names(broken_names)) {
cartefrance=cartefrance %>% mutate(region=ifelse(region==bn,broken_names[[bn]],region))
}
department_ciblenum$REGION=as.character(department_ciblenum$name)
cartefrance=cartefrance %>% left_join(department_ciblenum,by=c("region"="REGION"))
france_cible_ggplot= ggplot(cartefrance,aes(x=long,y=lat)) +
geom_polygon(aes(group=group,fill=ciblenum),color=grey(0.75)) +
scale_fill_continuous(type="viridis") +
coord_map() +
ggtitle("titre")
france_cible_ggplot
department_ciblenum=learn  %>% group_by(department) %>%
summarize(ciblenum=mean(ciblenum))%>% inner_join(dept,by=c("department"="id"))
cartefrance=as_tibble(map_data("france"))
cartefrance=cartefrance %>% mutate(region=str_to_upper(region))
broken_names=list("VAL-DOISE"="VAL-D'OISE", "COTES-DARMOR"="COTES-D'ARMOR", "COTE-DOR"="COTE-D'OR",
"CORSE DU SUD"="CORSE-DU-SUD")
for(bn in names(broken_names)) {
cartefrance=cartefrance %>% mutate(region=ifelse(region==bn,broken_names[[bn]],region))
}
department_ciblenum$REGION=as.character(department_ciblenum$name)
cartefrance=cartefrance %>% left_join(department_ciblenum,by=c("region"="REGION"))
france_cible_ggplot= ggplot(cartefrance,aes(x=long,y=lat)) +
geom_polygon(aes(group=group,fill=ciblenum),color=grey(0.75)) +
scale_fill_continuous(type="viridis") +
scale_fill_manual(label="valeur cible moyenne")+
coord_map() +
ggtitle("Succes/Echecs de la campagne par département")
france_cible_ggplot
department_ciblenum=learn  %>% group_by(department) %>%
summarize(ciblenum=mean(ciblenum))%>% inner_join(dept,by=c("department"="id"))
cartefrance=as_tibble(map_data("france"))
cartefrance=cartefrance %>% mutate(region=str_to_upper(region))
broken_names=list("VAL-DOISE"="VAL-D'OISE", "COTES-DARMOR"="COTES-D'ARMOR", "COTE-DOR"="COTE-D'OR",
"CORSE DU SUD"="CORSE-DU-SUD")
for(bn in names(broken_names)) {
cartefrance=cartefrance %>% mutate(region=ifelse(region==bn,broken_names[[bn]],region))
}
department_ciblenum$REGION=as.character(department_ciblenum$name)
cartefrance=cartefrance %>% left_join(department_ciblenum,by=c("region"="REGION"))
france_cible_ggplot= ggplot(cartefrance,aes(x=long,y=lat)) +
geom_polygon(aes(group=group,fill=ciblenum),color=grey(0.75)) +
scale_fill_continuous(type="viridis",label="valeur cible moyenne") +
coord_map() +
ggtitle("Succes/Echecs de la campagne par département")
france_cible_ggplot
department_ciblenum=learn  %>% group_by(department) %>%
summarize(ciblenum=mean(ciblenum))%>% inner_join(dept,by=c("department"="id"))
cartefrance=as_tibble(map_data("france"))
cartefrance=cartefrance %>% mutate(region=str_to_upper(region))
broken_names=list("VAL-DOISE"="VAL-D'OISE", "COTES-DARMOR"="COTES-D'ARMOR", "COTE-DOR"="COTE-D'OR",
"CORSE DU SUD"="CORSE-DU-SUD")
for(bn in names(broken_names)) {
cartefrance=cartefrance %>% mutate(region=ifelse(region==bn,broken_names[[bn]],region))
}
department_ciblenum$REGION=as.character(department_ciblenum$name)
cartefrance=cartefrance %>% left_join(department_ciblenum,by=c("region"="REGION"))
france_cible_ggplot= ggplot(cartefrance,aes(x=long,y=lat)) +
geom_polygon(aes(group=group,fill=ciblenum),color=grey(0.75)) +
labs(x="", y="", fill="valeur cible moyenne" )
scale_fill_continuous(type="viridis") +
coord_map() +
ggtitle("Succes/Echecs de la campagne par département")
department_ciblenum=learn  %>% group_by(department) %>%
summarize(ciblenum=mean(ciblenum))%>% inner_join(dept,by=c("department"="id"))
cartefrance=as_tibble(map_data("france"))
cartefrance=cartefrance %>% mutate(region=str_to_upper(region))
broken_names=list("VAL-DOISE"="VAL-D'OISE", "COTES-DARMOR"="COTES-D'ARMOR", "COTE-DOR"="COTE-D'OR",
"CORSE DU SUD"="CORSE-DU-SUD")
for(bn in names(broken_names)) {
cartefrance=cartefrance %>% mutate(region=ifelse(region==bn,broken_names[[bn]],region))
}
department_ciblenum$REGION=as.character(department_ciblenum$name)
cartefrance=cartefrance %>% left_join(department_ciblenum,by=c("region"="REGION"))
france_cible_ggplot= ggplot(cartefrance,aes(x=long,y=lat)) +
geom_polygon(aes(group=group,fill=ciblenum),color=grey(0.75)) +
labs(x="", y="", fill="valeur cible moyenne" )+
scale_fill_continuous(type="viridis") +
coord_map() +
ggtitle("Succes/Echecs de la campagne par département")
france_cible_ggplot
p10=ggplot(learn, aes(x = REGION, fill= csp)) +
labs(title = "Répartition des CSP par région",
x = "Région", y = "Nombre d'observations",
subtitle = "en fonction des régions") +
# scale_fill_manual(values=c("brown2","lightskyblue"),label=c("Echec","Succès"))+
geom_bar(col = "black")+coord_flip()
p10
